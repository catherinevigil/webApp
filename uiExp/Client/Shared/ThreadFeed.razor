
@using uiExp.Shared
@using System;
@using System.Collections.Generic;
@using System.ComponentModel
@using System.ComponentModel.Design
@using System.Linq;
@using System.Net
@using System.Text
@using System.IO;
@inject HttpClient Http
@using System.Net.Http
@inject NavigationManager NavigationManager
@inject IJSRuntime js


@code{
    [Parameter]
    public List<PublicConvo> ConvoList{ get; set; }

    public String getClass(Boolean left)
    {
        if (left)
            return ("message message-left aos-init");
        else
            return ("message message-right aos-init");

    }
    public String getAlign(Boolean left)
    {
        if (left)
            return "left";
        else
            return "right";
    }

    public String getConversant(bool even, Conversation conversation)
    {

        if (even)
            return conversation.Conversants.First().GetName();
        else
            return conversation.Conversants.Last().GetName();
    }
    public String getAnchor(int x)
    {
        int a = x + 1;
        if (x < (LoadFeedConvos.ConvoList.Count - 1))//if not the last convo
            return "#m" + a.ToString() + "00";
        else
            return null;
    }
    public String getId(int a, int b, int c)
    {
        return "m" + a.ToString() + b.ToString() + c.ToString();
    }

    public void dump(object a)
    {
        DumpityDump.Dump(a); //this will print a json of the  object's properties/values to the console
    }

    public void ShowData()
    {
    }

    public void NavigateToConvo(int talk)
    {
        NavigationManager.NavigateTo("/convo/" + talk);

    }

    @*protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await js.InvokeVoidAsync("initializeAnimateInListener");
            await js.InvokeVoidAsync("initializeAnimateOutListener");
        }
    }*@

    public int bottomHeaderHeight = 60;//aos offset for bottom
    public int animationDuration = 1000;
    public int messagesOffset = 80;//aos offset for top

    public void DumpRequests()
    {
        DumpityDump.Dump(LoadRequests.LineList);
    }
    public void NavigateToRespond(int line)
    {
        //
    }
}


<div class="content">
        <div class="page-content">
            <section class="aos-init" data-aos-once="false" data-aos-duration="600" id="content-container">
                @*<div style="height:150px">
                    </div>*@
                @for (int x = 0; x < ConvoList.Count; x++)
                {
                    var convo = x;

                    <div class="messages" data-aos="slow-partial-fade" data-aos-duration="@animationDuration" data-aos-offset="@messagesOffset" @onclick="() => NavigateToConvo(convo)" data-aos-anchor=@getAnchor(x) data-aos-anchor-placement="@((x == LoadFeedConvos.ConvoList.Count - 1) ? "top-top" : "bottom-bottom")" data-aos-id="convo-block">
                        @*this will make it so last message is automatically faded(there's no element on the page for it to fade out with, so starts fading out. to fix, could have to div elements w/ if loop, or extra code for last convo, or use js *@

                        <div class="feed-header" data-aos="fade" data-aos-once="false" data-aos-duration="@animationDuration" data-aos-offset="@bottomHeaderHeight" data-aos-anchor-placement="bottom-bottom" data-aos-id="image-divider">


                            @if (ConvoList[x].GetConversants().Count == 2)
                            {
                                <div>
                                    <img src="@(ConvoList[x].GetConversants()[0].GetImg())" class="profile-pic">
                                    <img src="@(ConvoList[x].GetConversants()[1].GetImg())" class="profile-pic">
                                </div>
                            }
                            else
                            {

                            }
                            <div class="header-text">
                                <h1 class="feed-title">@ConvoList[x].GetTitle()</h1>
                                <p class="names">
                                    <span>
                                        @ConvoList[x].GetNames()
                                    </span>
                                </p>
                            </div>
                        </div>
                        <div>
                            @for (int i = 0; i < ConvoList[x].GetFeedPreview().GetGroups().Count; i++)
                            {
                                <div class="message-group">
                                    @*<p class="name" style="text-align:@getAlign(i % 2 == 0); color:lightgray" data-aos="fade" data-aos-once="false" data-aos-duration="@animationDuration" data-aos-offset="@bottomHeaderHeight" data-aos-anchor-placement="bottom-bottom">
                                        <span>
                                            @getConversant((i % 2 == 0), LoadConvos.ConvoList[x])
                                        </span>
                                    </p>*@
                                    @for (int y = 0; y < ConvoList[x].GetFeedPreview().GetGroups()[i].Messages.Count; y++)
                                    {
                                        <p class=@getClass(i % 2 == 0) style="text-align:left" data-aos="fade" data-aos-once="false" data-aos-duration="@animationDuration" data-aos-offset="@bottomHeaderHeight" data-aos-anchor-placement="bottom-bottom" id=@getId(x, i, y)>
                                            <span>
                                                @ConvoList[x].GetFeedPreview().GetGroups()[i].Messages[y].Text
                                            </span>
                                        </p>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                    <hr style="border-top:1px solid white;">
                }
                <div style="height:150px"></div>
            </section>
        </div>
    }
</div>
