
@using uiExp.Shared
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IJSRuntime js


@code {
    private void NavigateBack()
    {
        var destination = (InPm()) ? "/inbox" : "/";
        NavigationManager.NavigateTo(destination);
    }

    private void NavigateRequestComponent() { NavigationManager.NavigateTo("/request"); }
    private void NavigateInboxComponent() { NavigationManager.NavigateTo("/inbox"); }
    private void NavigateMyLinesComponent() { NavigationManager.NavigateTo("/mylines"); }
    private int GetConvoNum()
    {
        var start = NavigationManager.Uri.LastIndexOf("/") + 1;
        var length = NavigationManager.Uri.Length;
        string convo = NavigationManager.Uri.Substring(start, length - start);
        return Int32.Parse(convo);
    }

    private bool AtHome()
    {
        return NavigationManager.Uri.EndsWith("/index");
    }
    private bool InConvo()
    {
        return NavigationManager.Uri.Contains("/convo");
    }
    private bool InInbox()
    {
        return NavigationManager.Uri.EndsWith("/inbox");
    }
    private bool InRequest()
    {
        return NavigationManager.Uri.EndsWith("/request");
    }
    private bool AtMylines()
    {
        return NavigationManager.Uri.EndsWith("/mylines");
    }
    private bool InPm()
    {
        return NavigationManager.Uri.Contains("Pm");
    }
    private bool ShowBottom()
    {
        return !InConvo() && !InInbox() && !InRequest() & !InPm();
    }
    private String GetText()
    {
        if (AtHome())
            return "Conversation request...";
        else
            return "Comment...";
    }
    private void GoToProfile()
    {
        NavigationManager.NavigateTo("/user");
    }

    public static int ConvoNum = 0;


    [JSInvokable]
    public static void updateHeader()
    {
        ConvoNum = ConvoNum + 1;
    }

    public void printHeader()
    {
        foreach (var convo in LoadFeedConvos.ConvoList)
            Console.WriteLine(convo.GetTitle());
    }
    public void PrintUri()
    {
        Console.WriteLine(NavigationManager.Uri);
    }
    public bool ShowTopFloat()
    {
        if (AtHome())
        {
            return true;
        }
        return false;
    }

    }
}



@*example app
        <div class="page">
        <div class="sidebar">
            <NavMenu />
        </div>

        <div class="main">
            <div class="top-row px-4">
                <a href="http://blazor.net" target="_blank" class="ml-md-auto">About</a>
            </div>

            <div class="content px-4">
                @Body
            </div>
        </div>
    </div>*@

<div class="main">

    @if (!ShowBottom())
    {
        <div class="top-row px-4" id="normal" style="position:fixed; top:0">
            <span class="material-icons" @onclick="NavigateBack">
                arrow_back_ios
            </span>
            @if (InConvo())
            {
                <span class="convo-title">@LoadFeedConvos.ConvoList[GetConvoNum()].GetTitle()</span>
            }
        </div>
    }
    else if (AtMylines())
    {
        <div class="top-row px-4" id="mylines" style="position:fixed; top:0">
            <span class="material-icons">
                settings
            </span>
        </div>
    }


    @Body

    @*in order to get this to stay fixed, need to specifiy position in line.*@
    @if (ShowBottom())
    {
        <div class="bottom-row px-4" style="position:fixed; bottom:0">
            <div class="nav-icon-container">
                <i class="fas fa-home fa-2x icon" @onclick="NavigateBack"></i>
                <img src="https://pbs.twimg.com/profile_images/955259459449884672/cxYFJUJX_400x400.jpg" class="profile-link" @onclick="NavigateMyLinesComponent">
                <i class="fas fa-inbox fa-2x icon" @onclick="NavigateInboxComponent"></i>
            </div>
        </div>
    }
    else if (NavigationManager.Uri.Contains("request"))
    {
        <div class="bottom-row px-4" style="position:fixed; bottom:0">
            <div @ref=inputDiv class="input-container">
                <textarea id="inputTextArea" class="comment-reply-message-input" placeholder="@RequestInputPlaceholder" style="resize:none" @bind="request" rows="1" @oninput="Resize" />
                <i class="fas fa-arrow-up icon sendButton" @onclick="@submitRequest"></i>
            </div>
        </div>
    }
    else if (NavigationManager.Uri.Contains("convo"))
    {
        <div class="bottom-row px-4" style="position:fixed; bottom:0">
            <div @ref=inputDiv class="input-container">
                <textarea id= "inputTextArea" class="comment-reply-message-input" placeholder="@CommentInputPlaceholder" style = "resize:none"  @bind="convoComment" rows = "1" @oninput = "Resize" />
                <i class="fas fa-arrow-up icon sendButton" @onclick="@submitComment"></i>
            </div>
        </div>
    }
    else if (NavigationManager.Uri.Contains("Pm"))
    {
        <div class="bottom-row px-4" style="position:fixed; bottom:0">
            <div @ref=inputDiv class="input-container">
                <textarea id= "inputTextArea" placeholder="@MessageInputPlaceholder" class="comment-reply-message-input" style="resize:none" @bind="messageReply" rows="1" @oninput="Resize" />
                <i class="fas fa-arrow-up icon sendButton" @onclick="@sendReply"></i>
            </div>
        </div>
    }
</div>

@*on input to bottom comment/reply input, will need to hide header. input box will grow and it will get ugly*@
@*style="align-items:flex-end"*@

@code{

    @*public double GetHeight()
    {
        return 
    }*@
ElementReference inputDiv;
public string MessageInputPlaceholder = "reply...";
public string RequestInputPlaceholder = "what's on your mind?...";
public string CommentInputPlaceholder = "comment...";

private String messageReply { get; set; }
private String convoComment { get; set; }
private String request { get; set; }

private void submitComment()
{

}
private void submitRequest()
{

}
private void sendReply()
{

}

[Inject] IJSRuntime JSRuntime { get; set; }
double MyHeight = 0;
async Task Resize()
{
    var result = await JSRuntime.InvokeAsync<object>("eval", @"(function() {
            inputTextArea.style.height='auto';
            inputTextArea.style.height=(inputTextArea.scrollHeight)+'px';
            return inputTextArea.scrollHeight;
        })()");
    Double.TryParse(result.ToString(), out MyHeight);
}

@*failed JS code, was just above return Line. problem is inputDiv is not found
inputDiv.style.height=(inputTextArea.scrollHeight+10)+'px'*@


}