
@using uiExp.Shared
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IJSRuntime js


@code {
    private void NavigateBack()
    {
        var destination = (InPm()) ? "/inbox" : "/";
        NavigationManager.NavigateTo(destination);
    }

    private void NavigateRequestComponent() { NavigationManager.NavigateTo("/request"); }
    private void NavigateInboxComponent() { NavigationManager.NavigateTo("/inbox"); }
    private void NavigateMyLinesComponent() { NavigationManager.NavigateTo("/mylines"); }
    private int GetConvoNum()
    {
        var start = NavigationManager.Uri.LastIndexOf("/") + 1;
        var length = NavigationManager.Uri.Length;
        string convo = NavigationManager.Uri.Substring(start, length - start);
        return Int32.Parse(convo);
    }
    private bool AtHome()
    {
        return NavigationManager.Uri.EndsWith("/index");
    }
    private bool InConvo()
    {
        return NavigationManager.Uri.Contains("/convo");
    }
    private bool InInbox()
    {
        return NavigationManager.Uri.EndsWith("/inbox");
    }
    private bool InRequest()
    {
        return NavigationManager.Uri.EndsWith("/request");
    }
    private bool InProfile()
    {
        return NavigationManager.Uri.Contains("profile");
    }
    private bool AtMylines()
    {
        return NavigationManager.Uri.EndsWith("/mylines");
    }
    private bool InPm()
    {
        return NavigationManager.Uri.Contains("Pm");
    }
    private bool ShowBottomNav()
    {
        return !InConvo() && !InInbox() && !InRequest() && !InPm();
    }
    private String GetText()
    {
        if (AtHome())
            return "Conversation request...";
        else
            return "Comment...";
    }
    private void GoToProfile()
    {
        NavigationManager.NavigateTo("/user");
    }
    private void NavigateCompose()
    {
        NavigationManager.NavigateTo("/compose");
    }
    private void NavigatetoSettings()
    {
        NavigationManager.NavigateTo("/settings");
    }

    public static int ConvoNum = 0;


    [JSInvokable]
    public static void updateHeader()
    {
        ConvoNum = ConvoNum + 1;
    }

    public void printHeader()
    {
        foreach (var convo in LoadFeedConvos.ConvoList)
            Console.WriteLine(convo.GetTitle());
    }
    public void PrintUri()
    {
        Console.WriteLine(NavigationManager.Uri);
    }
    public bool ShowTopFloat()
    {
        if (AtHome())
        {
            return true;
        }
        return false;
    }

}

@*example app
        <div class="page">
        <div class="sidebar">
            <NavMenu />
        </div>

        <div class="main">
            <div class="top-row px-4">
                <a href="http://blazor.net" target="_blank" class="ml-md-auto">About</a>
            </div>

            <div class="content px-4">
                @Body
            </div>
        </div>
    </div>*@
@*Example desktop app: 
        <div class ="page">
    
        <div class ="main">
        //main info//
        </div> 

        <div class="side-nav"> 
        //side menu area//
        </div>

        <div class="right-popup">
        //this is a dynamic window//
        </div>

        </div>*@
<div class="main">
    <div class="accordion-navpanel">
        <div class="accodrion">
            <div class="card">
                <a class="btn btn-link" href="/" style="color: white" type="button">
                    Explore
                    <span class="material-icons md-light" style="float: left; margin-right: 8px">
                        explore
                    </span>
                </a>
            </div>
            <div class="card">
                <a class="btn btn-link" href="/inbox" style="color: white" type="button" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                    Inbox
                    <span class="material-icons md-light" style="float: left; margin-right: 8px">
                        inbox
                    </span>
                </a>
            </div>
            <div class="card">
                <a class="btn btn-link" href="/mylines" style="color: white" type="button" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                    MyLines
                    <span class="material-icons md-light" style="float: left; margin-right: 8px">
                        account_circle
                    </span>
                </a>
            </div>
            <div class="card">
                <a class="btn btn-link" href="/settings" style="color: white" type="button" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                    Settings
                    <span class="material-icons md-light" style="float: left; margin-right: 8px">
                        settings
                    </span>
                </a>
            </div>
        </div>
    </div>
    <div class="Inspect-Panel" id="inspect">
        <h4 style="color: white; font-weight: bold; text-align: center; padding-bottom: .5em">Lines</h4>
        <div class="lines-content" style="height: 100%; border-top: solid thin white">
            <section class="aos-init" data-aos-once="false" data-aos-duration="600" id="content-container">
                <div class="comments" style="font-size: smaller; display: flex; flex-direction: column; height: 100%">
                    @for (int x = 0; x < 6; x++)
                    {
                        <LineComponent requestI="LoadRequests.RequestList[x]"></LineComponent>
                        <hr style="border-top:1px solid white;">
                    }
                </div>
            </section>
        </div>
    </div>
    <div class="contents">
        @Body
    </div>
</div>

@*on input to bottom comment/reply input, will need to hide header. input box will grow and it will get ugly*@
@*style="align-items:flex-end"*@

@code{

        private string getBottomHeight()
        {
            if (MyHeight == 0)
                return "58px";
            else
                return (MyHeight + 36).ToString() + "px";
        }
        ElementReference inputDiv;
    public string MessageInputPlaceholder = "reply...";
    public string RequestInputPlaceholder = "what's on your mind?...";
    public string CommentInputPlaceholder = "comment...";

    private String messageReply { get; set; }
    private String convoComment { get; set; }
    private String request { get; set; }

    private void submitComment()
    {

    }
    private void submitRequest()
    {

    }
    private void sendReply()
    {

    }

    [Inject] IJSRuntime JSRuntime { get; set; }
    double MyHeight = 0;
    async Task Resize()
    {
    @*var result = await JSRuntime.InvokeAsync<object>("eval", @"(function() {
            inputTextArea.style.height='auto';
            inputTextArea.style.height=(inputTextArea.scrollHeight)+'px';
            return inputTextArea.scrollHeight;
        })()");*@
        var result = await JSRuntime.InvokeAsync<object>("resizeText");
        Double.TryParse(result.ToString(), out MyHeight);
        Console.WriteLine("height: " + MyHeight);
    }
}
@*failed JS code, was just above return Line. problem is inputDiv is not found
inputDiv.style.height=(inputTextArea.scrollHeight+10)+'px'*@

