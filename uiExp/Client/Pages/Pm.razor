@page "/Pm/{pmNum}"
@using uiExp.Shared
@inject HttpClient Http
@using System.Net.Http
@inject NavigationManager NavigationManager


@code{
    [Parameter]
    public String pmNum { get; set; }
    //public int convoInt { get; set; }

    protected override void OnInitialized()
    {
        //the param will be set now
        pmNum = pmNum ?? "2";

    }

    public int getConversationNum()
    {
        return Int32.Parse(pmNum);

    }


    public String getClass(Boolean left)
    {
        if (left)
            return ("message message-left aos-init");
        else
            return ("message message-right aos-init");

    }

    public String getAlign(Boolean left)
    {
        if (left)
            return "left";
        else
            return "right";
    }


    //static String[] testlist = new String[] { "eli:", "helloworld", "kush:", "hello eli" };
    PrivateMessage privateM => LoadDms.InboxList[getConversationNum()];
    Conversation convo => privateM.GetConvo();//LoadConvos.linesList[1]

    public void ShowData()
    {
        Console.WriteLine("hello");
        // var stringWhole = String.Concat(LoadConvos.ConvoList[getConversationNum()]);
        // Console.WriteLine(stringWhole); //this will print a json of the feed object's properties/values to the console
    }

    public int i = 0;
    public String TopFadeOffset = "-100";
    public String BottomFadeOffset = "100";
    public String TopFadeOutAnchorP = "center-top";
    public String FadeInAnchorP = "center-bottom";

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/inbox");
    }

}
<!--this is code for displaying a conversation-->
<div class="page">
    <div class="top-row-pm px-4" id="left">
        <span class="material-icons" @onclick="NavigateBack">
            arrow_back_ios
        </span>
        @*<span class="pm-title">
            @privateM.GetConvoName()
        </span>*@
        
    </div>

    <div class="conversation" @ref=pmConvo>
        <div id="page" data-aos-easing="ease" data-aos-duration="600" data-aos-delay="0">
            <div class="page-content-pm">
                <section class="aos-init " data-aos-once="false" data-aos-duration="600" id="content-container">
                    <div class="messages" style="margin:0px">
                        @foreach (var group in convo.Groups)
                        {
                            <div class="message-group">
                                @*@<p style="text-align:@getAlign(group.Left);" data-aos="fade" data-aos-once="false" data-aos-duration="600" data-aos-offset="60" data-aos-anchor-placement="@FadeInAnchorP">
                                        <span data-aos="slow-partial-fade" data-aos-duration="600" data-aos-offset="-100px" data-aos-anchor-placement="top-top">
                                            @group.Texter.GetName()
                                        </span>
                                    </p>*@
                                @foreach (var message in group.Messages)
                                {
                                    <p class=@getClass(group.Left) data-aos="fade" data-aos-once="false" data-aos-duration="600" data-aos-offset="@BottomFadeOffset" data-aos-anchor-placement="@FadeInAnchorP">
                                        <span data-aos="out" data-aos-duration="600" data-aos-offset="@TopFadeOffset" data-aos-anchor-placement="@TopFadeOutAnchorP">
                                            @if (@message.Text.Contains("img"))
                                            {
                                                @((MarkupString)@message.Text)
                                            }
                                            else
                                            {
                                                @message.Text
                                            }
                                        </span>
                                    </p>
                                }
                            </div>
                            i++;
                        }

                    </div>
                </section>
            </div>
        </div>
    </div>
    @*<div class="bottom-row-pm">
        <div class="input-container" id="input-container-bottom">
            <textarea @ref=inputArea placeholder="@MessageInputPlaceholder" class="comment-reply-message-input" style="resize:none" @bind="messageReply" rows="1" @oninput="Resize" />
            <i class="fas fa-arrow-up icon sendButton" @onclick="@sendReply"></i>
        </div>
    </div>*@
    <div class="bottom-row-pm">
        <div class="messaging-bottom">
            @if (ShowImports)
            {
                <div class="icon-column">
                    <div class="icon-div">
                        <i class="material-icons" @onclick="DeployImportImage">
                            camera_alt
                        </i>
                        <i class="material-icons" @onclick="DeployImportBubbles">
                            add_box
                        </i>
                    </div>
                </div>
                
            }

            <div class="input-container">
                <textarea @ref="inputArea" class="comment-reply-message-input" placeholder="@MessageInputPlaceholder" style="resize:none" @bind="messageReply" rows="1" @oninput="Resize" />
                <i class="fas fa-arrow-up icon sendButton" @onclick="@sendReply"></i>
            </div>
        </div>
    </div>
</div>

@code{
    private bool ShowImports=true;
    private void DeployImportBubbles() { }
    private void DeployImportImage() { }



    [Inject] IJSRuntime JSRuntime { get; set; }

    public string MessageInputPlaceholder = "reply...";
    ElementReference inputArea;
    ElementReference pmConvo;
    private String messageReply { get; set; }

    private void sendReply()
    {
        var convoNum = getConversationNum();
        var lastTexter = LoadDms.InboxList[convoNum].GetConvo().Groups.Last().GetTexter();
        if (!(lastTexter == CurrentUser.cUser))
            LoadDms.InboxList[convoNum].GetConvo().Groups.Add(new MessageGroup(CurrentUser.cUser, false));

        LoadDms.InboxList[convoNum].GetConvo().Groups.Last().Messages.Add(new Message(messageReply));
        messageReply = "";

        normalHeight();
        Resize(); //calling both functions in this returns box to its proper size after sending a message...
    }


    private string getBottomHeight()
    {
        if (MyHeight == 0)
            return "58px";
        else
            return (MyHeight + 36).ToString() + "px";
    }
    async Task normalHeight()
    {
        var result = await JSRuntime.InvokeAsync<object>("resetTextPm", inputArea, pmConvo);
        Double.TryParse(result.ToString(), out MyHeight);

    }

    double MyHeight = 0;
    async Task Resize()
    {

        var result = await JSRuntime.InvokeAsync<object>("resizeTextPm", inputArea, pmConvo);
        Double.TryParse(result.ToString(), out MyHeight);
        Console.WriteLine("height: " + MyHeight);
    }


}
