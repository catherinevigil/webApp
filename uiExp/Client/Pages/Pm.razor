@page "/Pm/{pmNum}"
@using uiExp.Shared
@inject HttpClient Http
@using System.Net.Http

@code{
        [Parameter]
        public String pmNum { get; set; }
    //public int convoInt { get; set; }

    protected override void OnInitialized()
    {
        //the param will be set now
        pmNum = pmNum ?? "2";

    }

    public int getConversationNum()
    {
        return Int32.Parse(pmNum);

    }


    public String getClass(Boolean left)
    {
        if (left)
            return ("message message-left aos-init");
        else
            return ("message message-right aos-init");

    }

    public String getAlign(Boolean left)
    {
        if (left)
            return "left";
        else
            return "right";
    }


    //static String[] testlist = new String[] { "eli:", "helloworld", "kush:", "hello eli" };
    Conversation convo => LoadDms.InboxList[getConversationNum()].GetConvo();//LoadConvos.linesList[1]

    public void ShowData()
    {
        Console.WriteLine("hello");
        // var stringWhole = String.Concat(LoadConvos.ConvoList[getConversationNum()]);
        // Console.WriteLine(stringWhole); //this will print a json of the feed object's properties/values to the console
    }

    public int i = 0;
    public String TopFadeOffset = "-100";
    public String BottomFadeOffset = "100";
    public String TopFadeOutAnchorP = "center-top";
    public String FadeInAnchorP = "center-bottom";

    private void NavigateBack() { }

}
<!--this is code for displaying a conversation-->
<div class="page">
    <div class="top-row-pm px-4" id="left">
        <span class="material-icons" @onclick="NavigateBack">
            arrow_back_ios
        </span>
    </div>

    <div class="conversation">
        <div id="page" data-aos-easing="ease" data-aos-duration="600" data-aos-delay="0">
            <div class="page-content-pm">
                <section class="aos-init " data-aos-once="false" data-aos-duration="600" id="content-container">
                    <div class="messages">
                        @foreach (var group in convo.Groups)
                        {
                        <div class="message-group">
                            @*@<p style="text-align:@getAlign(group.Left);" data-aos="fade" data-aos-once="false" data-aos-duration="600" data-aos-offset="60" data-aos-anchor-placement="@FadeInAnchorP">
                                <span data-aos="slow-partial-fade" data-aos-duration="600" data-aos-offset="-100px" data-aos-anchor-placement="top-top">
                                    @group.Texter.GetName()
                                </span>
                            </p>*@
                            @foreach (var message in group.Messages)
                            {
                                <p class=@getClass(group.Left) data-aos="fade" data-aos-once="false" data-aos-duration="600" data-aos-offset="@BottomFadeOffset" data-aos-anchor-placement="@FadeInAnchorP">
                                    <span data-aos="out" data-aos-duration="600" data-aos-offset="@TopFadeOffset" data-aos-anchor-placement="@TopFadeOutAnchorP">
                                        @if (@message.Text.Contains("img"))
                                        {
                                            @((MarkupString)@message.Text)
                                        }
                                        else
                                        {
                                            @message.Text
                                        }
                                    </span>
                                </p>
                            }
                        </div>
                            i++;
                        }

                    </div>
                </section>
            </div>
        </div>
    </div>
    <div class="bottom-row px-4">
        <div @ref=inputDiv class="input-container" id="input-container-bottom">
            <textarea @ref=inputArea placeholder="@MessageInputPlaceholder" class="comment-reply-message-input" style="resize:none" @bind="messageReply" rows="1" @oninput="Resize" />
            <i class="fas fa-arrow-up icon sendButton" @onclick="@sendReply"></i>
        </div>
    </div>
</div>

    @code{
        public string MessageInputPlaceholder = "reply...";
        ElementReference inputDiv;
        ElementReference inputArea;
        private String messageReply { get; set; }

        private void sendReply()
        {
            Console.WriteLine("convo ongoing");
            var convoNum = getConversationNum();
            var lastTexter = LoadDms.InboxList[convoNum].GetConvo().Groups.Last().GetTexter();
            if (!(lastTexter == CurrentUser.cUser))
                LoadDms.InboxList[convoNum].GetConvo().Groups.Add(new MessageGroup(CurrentUser.cUser));

            LoadDms.InboxList[convoNum].GetConvo().Groups.Last().Messages.Add(new Message(messageReply));

        }


        private string getBottomHeight()
        {
            if (MyHeight == 0)
                return "58px";
            else
                return (MyHeight + 36).ToString() + "px";
        }

        [Inject] IJSRuntime JSRuntime { get; set; }
        double MyHeight = 0;
        async Task Resize()
        {
            @*var result = await JSRuntime.InvokeAsync<object>("eval", @"(function() {
                    inputTextArea.style.height='auto';
                    inputTextArea.style.height=(inputTextArea.scrollHeight)+'px';
                    return inputTextArea.scrollHeight;
                })()");*@
        var result = await JSRuntime.InvokeAsync<object>("resizeText", inputArea);
        Double.TryParse(result.ToString(), out MyHeight);
        Console.WriteLine("height: " + MyHeight);
    }

    }
