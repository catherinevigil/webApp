@page "/tag/{tagNum}"
@using uiExp.Shared
@using System;
@using System.Collections.Generic;
@inject NavigationManager NavigationManager
@layout MainLayout
@inject HttpClient Http
@using System.Net.Http

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code {
    private void NavigateHomeFeedComponent() { NavigationManager.NavigateTo("/"); }
    public String ListHeight = "300px"; //height in pixels of list

    [Parameter]
    public String tagNum { get; set; }

    protected override void OnInitialized()
    {
        //the param will be set now
        tagNum = tagNum ?? "0";
    }

    public int getTagNum()
    {
        return Int32.Parse(tagNum);

    }

    public string GetMoreMessagesString(PublicConvo convo)
    {
        var messagesLeft = convo.GetConversation().MessageCount - convo.GetFeedPreview().GetMessageCount();
        string output = "Read " + messagesLeft.ToString() + " more messages...";
        return output;
    }

    public String getClass(Boolean leftMessage)
    {
        if (leftMessage)
            return ("message message-left aos-init");
        else
            return ("message message-right aos-init");

    }
    public String getAlign(Boolean left)
    {
        if (left)
            return "left";
        else
            return "right";
    }

    public String getConversant(bool even, Conversation conversation)
    {

        if (even)
            return conversation.Conversants.First().GetName();
        else
            return conversation.Conversants.Last().GetName();
    }
    public String getAnchor(int x)
    {
        int a = x + 1;
        if (x < (LoadFeedConvos.ConvoList.Count - 1))//if not the last convo
            return "#m" + a.ToString() + "00";
        else
            return null;
    }
    public String getId(int a, int b, int c)
    {
        return "m" + a.ToString() + b.ToString() + c.ToString();
    }

    Hashtag tag => Hashtags.Tags[getTagNum()];

    public void dump(object a)
    {
        DumpityDump.Dump(a); //this will print a json of the  object's properties/values to the console
    }

    public void NavigateToConvo(int talk)
    {
        NavigationManager.NavigateTo("/convo/1/" + talk);

    }

    public int bottomHeaderHeight = 60;//aos offset for bottom
    public int animationDuration = 1000;
    public int messagesOffset = 80;//aos offset for top

    public String GetConvoHeading(PublishedMessage rm)
    {
        if (rm.GetPartners().Count == 1)
        {
            return rm.GetPartners()[0].GetName();
        }
        else
        {
            return rm.GetConvoName();
        }
    }

    public void NavigateToGenericTagConvo(int talk)
    {
        NavigationManager.NavigateTo("/convo/2/" + talk);

    }

    enum FeedType
    {
        PhilosophyFeed,
        ExistensialFeed,
        PostmodernFeed,
        AestheticFeed,
        RevolutionaryFeed
    }

    FeedType CurrentFeed = FeedType.PhilosophyFeed;
    public String Selector = "philosophy";

    public bool selectorOne = false;
    public bool selectorTwo = false;
    public bool selectorThree = false;
    public bool selectorFour = false;

    public void SwitchOne()
    {
        selectorOne = true;
    }
    public void SwitchOneBack()
    {
        selectorOne = false;
    }
    public void SwitchTwo()
    {
        selectorTwo = true;
    }
    public void SwitchTwoBack()
    {
        selectorTwo = false;
    }
    public void SwitchThree()
    {
        selectorThree = true;
    }
    public void SwitchThreeBack()
    {
        selectorThree = false;
    }
    public void SwitchFour()
    {
        selectorFour = true;
    }
    public void SwitchFourBack()
    {
        selectorFour = false;
    }

    public String GetOneBackground()
    {
        if (selectorOne)
        {
            return "white";
        }
        else
        {
            return "black";
        }
    }
    public String GetOneColor()
    {
        if (selectorOne)
        {
            return "black";
        }
        else
        {
            return "white";
        }
    }
    public String GetTwoBackground()
    {
        if (selectorTwo)
        {
            return "white";
        }
        else
        {
            return "black";
        }
    }
    public String GetTwoColor()
    {
        if (selectorTwo)
        {
            return "black";
        }
        else
        {
            return "white";
        }
    }
    public String GetThreeBackground()
    {
        if (selectorThree)
        {
            return "white";
        }
        else
        {
            return "black";
        }
    }
    public String GetThreeColor()
    {
        if (selectorThree)
        {
            return "black";
        }
        else
        {
            return "white";
        }
    }
    public String GetFourBackground()
    {
        if (selectorFour)
        {
            return "white";
        }
        else
        {
            return "black";
        }
    }
    public String GetFourColor()
    {
        if (selectorFour)
        {
            return "black";
        }
        else
        {
            return "white";
        }
    }
    public String GetSelector()
    {
        if (selectorOne)
        {
            return "one";
        }
        else if (selectorTwo)
        {
            return "two";
        }
        else if (selectorThree)
        {
            return "three";
        }
        else if (selectorFour)
        {
            return "four";
        }
        else
        {
            return "zero";
        }
    }
}

<div class="top-float-selector" id="@GetSelector()">
</div>

<div class="content">
    <div class="top-float">
        <div class="feed-name-container" @onclick="(( selectorOne ? SwitchOneBack : SwitchOne))" style="background-color: @GetOneBackground(); color: @GetOneColor()">
            existensial
        </div>
        <div class="feed-name-container" @onclick="(( selectorTwo ? SwitchTwoBack : SwitchTwo))" style="background-color: @GetTwoBackground(); color: @GetTwoColor()">
            postmodern
        </div>
        <div class="feed-name-container" @onclick="(( selectorThree ? SwitchThreeBack : SwitchThree))" style="background-color: @GetThreeBackground(); color: @GetThreeColor()">
            aesthetic
        </div>
        <div class="feed-name-container" @onclick="(( selectorFour ? SwitchFourBack : SwitchFour))" style="background-color: @GetFourBackground(); color: @GetFourColor()">
            revolutionary
        </div>
    </div>
  
</div>

@*
LoadGenericExistensialConvos
LoadGenericPostmodernConvos
LoadGenericAestheticConvos
LoadGenericRevolutionaryConvos*@




<div style="height:25px">
</div>
<div class="page-content">
    <section class="aos-init" data-aos-once="false" data-aos-duration="600" id="content-container">
        @*<div style="height:150px">

            </div>*@
        @for (int x = 0; x < LoadGenericTagConvos.ConvoList.Count; x++)
        {
            var convo = x;

            <div class="messages" data-aos="slow-partial-fade" data-aos-duration="@animationDuration" data-aos-offset="@messagesOffset" @onclick="() => NavigateToGenericTagConvo(convo)" data-aos-anchor=@getAnchor(x) data-aos-anchor-placement="@((x == LoadFeedConvos.ConvoList.Count - 1) ? "top-top" : "bottom-bottom")" data-aos-id="convo-block">
                @*this will make it so last message is automatically faded(there's no element on the page for it to fade out with, so starts fading out. to fix, could have to div elements w/ if loop, or extra code for last convo, or use js *@

                <div class="feed-header" data-aos="fade" data-aos-once="false" data-aos-duration="@animationDuration" data-aos-offset="@bottomHeaderHeight" data-aos-anchor-placement="bottom-bottom" data-aos-id="image-divider">


                    @if (LoadGenericTagConvos.ConvoList[x].GetConversants().Count == 2)
                    {
                        <div>
                            <LinkedImages ConversantList="LoadGenericTagConvos.ConvoList[x].GetConversants()"></LinkedImages>
                            @*<img src="@(LoadFeedConvos.ConvoList[x].GetConversants()[0].GetImg())" class="profile-pic">
                                <img src="@(LoadFeedConvos.ConvoList[x].GetConversants()[1].GetImg())" class="profile-pic">*@
                        </div>
                    }
                    else
                    {

                    }
                    <div class="header-text">
                        <h1 class="feed-title">@LoadGenericTagConvos.ConvoList[x].GetTitle()</h1>
                        <p class="names">
                            <span>
                                <LinkedNames ConversantList="@LoadGenericTagConvos.ConvoList[x].GetConversants()"></LinkedNames>
                            </span>
                        </p>
                    </div>
                </div>
                <div>
                    @for (int i = 0; i < LoadGenericTagConvos.ConvoList[x].GetFeedPreview().GetGroups().Count; i++)
                    {
                        <div class="message-group">
                            @*<p class="name" style="text-align:@getAlign(i % 2 == 0); color:lightgray" data-aos="fade" data-aos-once="false" data-aos-duration="@animationDuration" data-aos-offset="@bottomHeaderHeight" data-aos-anchor-placement="bottom-bottom">
                                    <span>
                                        @getConversant((i % 2 == 0), LoadConvos.ConvoList[x])
                                    </span>
                                </p>*@
                            @for (int y = 0; y < LoadGenericTagConvos.ConvoList[x].GetFeedPreview().GetGroups()[i].Messages.Count; y++)
                            {
                                <p class=@getClass(LoadGenericTagConvos.ConvoList[x].GetFeedPreview().GetGroups()[i].Left) style="text-align:left" data-aos="fade" data-aos-once="false" data-aos-duration="@animationDuration" data-aos-offset="@bottomHeaderHeight" data-aos-anchor-placement="bottom-bottom" id=@getId(x, i, y)>
                                    <span>
                                        @LoadGenericTagConvos.ConvoList[x].GetFeedPreview().GetGroups()[i].Messages[y].Text
                                    </span>
                                </p>
                            }
                        </div>
                    }
                </div>
                <div class="more-messages">
                    <span @onclick="() => NavigateToGenericTagConvo(convo)">@GetMoreMessagesString(LoadGenericTagConvos.ConvoList[x])</span>
                </div>
            </div>

            <hr style="border-top:1px solid white;">
        }
        <div style="height:150px">

        </div>
    </section>
</div>



