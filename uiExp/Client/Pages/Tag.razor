@page "/tag/{tagNum}"
@using uiExp.Shared
@using System;
@using System.Collections.Generic;
@inject NavigationManager NavigationManager
@layout MainLayout
@inject HttpClient Http
@using System.Net.Http

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code {
    private void NavigateHomeFeedComponent() { NavigationManager.NavigateTo("/"); }
    public String ListHeight = "300px"; //height in pixels of list

    [Parameter]
    public String tagNum { get; set; }

    protected override void OnInitialized()
    {
        //the param will be set now
        tagNum = tagNum ?? "0";
    }

    public int getTagNum()
    {
        return Int32.Parse(tagNum);

    }

    public string GetMoreMessagesString(PublicConvo convo)
    {
        var messagesLeft = convo.GetConversation().MessageCount - convo.GetFeedPreview().GetMessageCount();
        string output = "Read " + messagesLeft.ToString() + " more messages...";
        return output;
    }

    public String getClass(Boolean leftMessage)
    {
        if (leftMessage)
            return ("message message-left aos-init");
        else
            return ("message message-right aos-init");

    }
    public String getAlign(Boolean left)
    {
        if (left)
            return "left";
        else
            return "right";
    }

    public String getConversant(bool even, Conversation conversation)
    {

        if (even)
            return conversation.Conversants.First().GetName();
        else
            return conversation.Conversants.Last().GetName();
    }


    public String getAnchor(int x)
    {
        int a = x + 1;
        if (x < (LoadFeedConvos.ConvoList.Count - 1))//if not the last convo
            return "#m" + a.ToString() + "00";
        else
            return null;
    }
    public String getId(int a, int b, int c)
    {
        return "m" + a.ToString() + b.ToString() + c.ToString();
    }

    Hashtag tag => Hashtags.Tags[getTagNum()];

    public void dump(object a)
    {
        DumpityDump.Dump(a); //this will print a json of the  object's properties/values to the console
    }

    public void NavigateToConvo(int talk)
    {
        NavigationManager.NavigateTo("/convo/1/" + talk);

    }

    public int bottomHeaderHeight = 60;//aos offset for bottom
    public int animationDuration = 1000;
    public int messagesOffset = 80;//aos offset for top

    public String GetConvoHeading(PublishedMessage rm)
    {
        if (rm.GetPartners().Count == 1)
        {
            return rm.GetPartners()[0].GetName();
        }
        else
        {
            return rm.GetConvoName();
        }
    }

    public void NavigateToGenericTagConvo(int talk)
    {
        NavigationManager.NavigateTo("/convo/2/" + talk);

    }

    enum FeedType
    {
        PhilosophyFeed,
        ExistensialFeed,
        PostmodernFeed,
        AestheticFeed,
        RevolutionaryFeed
    }

    FeedType CurrentFeed = FeedType.PhilosophyFeed;
    public String Selector = "philosophy";

    public bool selectorZero = false;
    public bool selectorOne = false;
    public bool selectorTwo = false;
    public bool selectorThree = false;
    public bool selectorFour = false;

    public void SwitchOne()
    {
        selectorOne = true;
    }
    public void SwitchOneBack()
    {
        selectorOne = false;
    }
    public void SwitchTwo()
    {
        selectorTwo = true;
    }
    public void SwitchTwoBack()
    {
        selectorTwo = false;
    }
    public void SwitchThree()
    {
        selectorThree = true;
    }
    public void SwitchThreeBack()
    {
        selectorThree = false;
    }
    public void SwitchFour()
    {
        selectorFour = true;
    }
    public void SwitchFourBack()
    {
        selectorFour = false;
    }

    public bool SwitchZeroOff()
    {
        if (selectorOne || selectorTwo || selectorThree || selectorFour)
            return selectorZero = true;
        else
            return selectorZero = false;
    }

    public String GetOneBackground()
    {
        if (selectorOne)
        {
            return "white";
        }
        else
        {
            return "black";
        }
    }
    public String GetOneColor()
    {
        if (selectorOne)
        {
            return "black";
        }
        else
        {
            return "white";
        }
    }
    public String GetTwoBackground()
    {
        if (selectorTwo)
        {
            return "white";
        }
        else
        {
            return "black";
        }
    }
    public String GetTwoColor()
    {
        if (selectorTwo)
        {
            return "black";
        }
        else
        {
            return "white";
        }
    }
    public String GetThreeBackground()
    {
        if (selectorThree)
        {
            return "white";
        }
        else
        {
            return "black";
        }
    }
    public String GetThreeColor()
    {
        if (selectorThree)
        {
            return "black";
        }
        else
        {
            return "white";
        }
    }
    public String GetFourBackground()
    {
        if (selectorFour)
        {
            return "white";
        }
        else
        {
            return "black";
        }
    }
    public String GetFourColor()
    {
        if (selectorFour)
        {
            return "black";
        }
        else
        {
            return "white";
        }
    }
    public String GetSelector()
    {
        if (selectorOne)
        {
            return "one";
        }
        else if (selectorTwo)
        {
            return "two";
        }
        else if (selectorThree)
        {
            return "three";
        }
        else if (selectorFour)
        {
            return "four";
        }
        else
        {
            return "zero";
        }
    }


    public void ShowData()
    {
        Console.WriteLine("hello");
        // var stringWhole = String.Concat(LoadConvos.ConvoList[getConversationNum()]);
        // Console.WriteLine(stringWhole); //this will print a json of the feed object's properties/values to the console
    }

    private int i = 0;
    private string TopFadeOffset = "-100";
    private string BottomFadeOffset = "100";
    private string TopFadeOutAnchorP = "center-top";
    private string FadeInAnchorP = "center-bottom";
    private bool justAddedSearch = false;
    private bool containsAllPeople = true;
    private string searchInputPlaceholder = "Search ByLines";

    ElementReference searchInputDiv;

    private string searchInput = "";
    private bool focusedSearch = false;
    private List<Hashtag> displayTags = new List<Hashtag>();
    private List<User> displayUsers = new List<User>();
    private List<Reciever> searchList = new List<Reciever>();
    private List<Reciever> suggestionsList = new List<Reciever>();
    private PublicConvo convo = new PublicConvo();

    public List<Hashtag> GetTags()
    {
        List<Hashtag> Tags = new List<Hashtag>();
        if (!(searchInput == ""))
        {
            var chars = searchInput.Length;
            foreach (var hashtag in Hashtags.Tags)
            {
                var tagLength = hashtag.Tag.Length;
                if (!(chars > tagLength))
                {
                    if (String.Equals(hashtag.Tag.Substring(0, chars).ToLower(), searchInput.ToLower()))
                    {
                        Tags.Add(hashtag);
                    }
                }
            }
        }
        return Tags;

    }
    public List<User> GetPeople()
    {
        List<User> People = new List<User>();
        if (!(searchInput == ""))
        {

            var chars = searchInput.Length;
            foreach (var person in Users.List)
            {
                var nameLength = person.GetName().Length;
                if (!(chars > nameLength))
                {
                    //Console.WriteLine("name substring: " + person.GetName().Substring(0, chars));
                    if (String.Equals(person.GetName().Substring(0, chars).ToLower(), searchInput.ToLower()))
                    {
                        Console.WriteLine("name == input: " + searchInput);
                        People.Add(person);
                    }
                }

            }
        }
        return People;
    }

    public string GetTagString(Hashtag tag)
    {
        return "#" + tag.Tag;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //initialize event listener
            await JSRuntime.InvokeVoidAsync("initKeypressListener", searchInputRef);
        }
    }
    public void checkState()
    {
        Console.WriteLine("focus top: " + focusedSearch);
        Console.WriteLine("searchInput: " + searchInput);
    }
    public void focusTop()
    {
        focusedSearch = true;
        Console.WriteLine("focused top");
    }
    public void blurTop()
    {
        //focusedSearch = false;
        Console.WriteLine("un focused top");
    }
    public void topInput()
    {
        //could improve efficiency by only calling these when searchInput is changed
        displayTags = GetTags();
        displayUsers = GetPeople();
        //Resize(searchInputRef, false);
        Console.WriteLine("top input");
    }

    public void addTag(Hashtag tag)
    {
        if (!searchesInList)
        {
            searchInputPlaceholder = "Narrow Search...";
        }
        searchList.Add(new Reciever(tag));
        var tagRecievers = GetHashtags(searchList);
        searchesInList = true;
        searchInput = "";
        selectedR = -1;
        rSelected = false;
        containsAllPeople = false;
        focus(searchInputRef);

        convo = LoadGenericTagConvos.GetTagConvo(GetHashtags(searchList));
        DumpityDump.Dump(convo.GetConversants());
        DumpityDump.Dump(convo.GetFeedPreview().GetGroups().Last().Messages.Last());


        justAddedSearch = true;
    }

    public void addPerson(User person)
    {

        Console.WriteLine("adding: ");
        DumpityDump.Dump(person);
        Console.WriteLine("added");
        if (!searchesInList)
        {
            searchInputPlaceholder = "Narrow Search...";
        }
        searchList.Add(new Reciever(person));
        var peopleRecievers = GetUsers(searchList);
        convo = LoadGenericTagConvos.GetOm(peopleRecievers);
        Console.WriteLine("convo conversants: ");
        DumpityDump.Dump(convo.GetConversants());
        DumpityDump.Dump(convo.GetFeedPreview().GetGroups().Last().Messages.Last());
        focus(searchInputRef);

        justAddedSearch = true;
        searchesInList = true;
        searchInput = "";

        //Console.WriteLine("recip list, user list: ");
        //DumpityDump.Dump(peopleRecievers);
        //Console.WriteLine("recip list, user names: ");
        //Console.WriteLine("recip list: ");
        //DumpityDump.Dump(searchList);
    }

    private List<User> GetUsers(List<Reciever> searches)
    {
        var list = new List<User>();
        foreach (var r in searches)
        {
            if (r.Type == 1)
            {
                list.Add(r.Person);
            }
            else
            {
                Console.WriteLine("not adding person");
            }
        }
        return list;
    }

    private List<Hashtag> GetHashtags(List<Reciever> searches)
    {
        var list = new List<Hashtag>();
        foreach (var r in searches)
        {
            if (r.Type == 2)
            {
                list.Add(r.Tag);
            }
            else
            {
                Console.WriteLine("not adding tag");
            }
        }
        return list;
    }

    public bool searchesInList = false;
    private bool searchHighlighted = false;
    private bool searchInputEmpty = false;

    async Task doNothingTop(KeyboardEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("pDefault", e);
    }

    private void noSearches()
    {
        convo = null;
        searchesInList = false;

    }

    private void detectKeyTop(KeyboardEventArgs e)
    {
        Console.WriteLine("key pressed: " + e.Key);


        if (e.Key == "Backspace")
        {
            if (searchesInList && searchInput == "")
            {
                if (searchHighlighted)
                {
                    searchList.RemoveAt(searchList.Count - 1);
                    searchHighlighted = false;
                    if (searchList.Count == 0)
                    {
                        noSearches();

                    }

                }
                else
                {
                    searchHighlighted = true;
                }
            }
        }
        else if (e.Key == "ArrowDown")
        {
            Console.WriteLine("selected R pre adjust: " + selectedR);

            rSelected = true;
            if (selectedR < GetNumSuggestions() - 1)
                selectedR++;
            else
                selectedR = 0;
            Console.WriteLine("selected R post adjust: " + selectedR);

        }
        else if (e.Key == "ArrowUp")
        {
            rSelected = true;
            if (selectedR == -1)
                selectedR = GetNumSuggestions() - 1;
            else
                selectedR--;
        }
        else if (e.Key == "Enter")
        {
            if (rSelected == true)
            {
                AddSearch(selectedR);
            }
            else
            {
                if (searchesInList && searchInput == "")
                {
                    focusSlow(messageInputRef);
                }
            }
        }
        else if (searchHighlighted) //thus written, arrow down or enter will not remove delete highlight. all other key actions will
        {
            searchHighlighted = false;
        }

        if (!((e.Key == "ArrowDown") | (e.Key == "ArrowUp")))
        {
            rSelected = false;
            selectedR = -1;
        }
        if (!(searchInput == ""))
        {
        }

    }
    private int GetNumSuggestions()
    {
        return displayTags.Count + displayUsers.Count;
    }

    private bool rSelected = false;
    private int selectedR = -1;

    public void AddSearch(int selected)
    {
        if (selectedR < displayTags.Count)
            addTag(displayTags[selectedR]);
        else
            addPerson(displayUsers[selectedR - displayTags.Count]);
        selectedR = -1;
    }

    async Task focus(ElementReference element)
    {
        await JSRuntime.InvokeAsync<object>("focus", element);
    }
    async Task focusSlow(ElementReference element)
    {
        //await JSRuntime.InvokeVoidAsync("block", e);
        await Task.Delay(5);//this is scrubby but was only way i could get focus to switch to message input on enter without adding a line break in the message box
        await JSRuntime.InvokeVoidAsync("focus", element);
    }

    private bool ShowSelector = true;
    private string message;
    ElementReference messageInputRef;
    ElementReference searchInputRef;

    [Inject] IJSRuntime JSRuntime { get; set; }

    double MessageHeight = 0;
    double SearchHeight = 0;

    public void DeployShareConvo()
    {

    }

    async Task Resize(ElementReference element, bool bottom)
    {
        var result = await JSRuntime.InvokeAsync<object>("resizeText", element);
        if (bottom)
        {
            Double.TryParse(result.ToString(), out MessageHeight);
            Console.WriteLine("bottom height: " + MessageHeight);
        }
        else
        {
            Double.TryParse(result.ToString(), out SearchHeight);
            Console.WriteLine("top height: " + SearchHeight);
        }
    }

    private string getBottomHeight()
    {
        if (MessageHeight == 0)
            return "58px";
        else
            return (MessageHeight + 36).ToString() + "px";
    }

    private string getTopHeight()
    {
        if (SearchHeight == 0)
            return "58px";
        else
            return (SearchHeight + 36).ToString() + "px";
    }

    public void sendMessage()
    {

    }

        }

<div class="top-row">
    <div class="search-container">
        <div class="addedSearchesList">
            @if (searchesInList)
        {
            for (int x = 0; x < searchList.Count - 1; x++)
            {

                    <span class="addedSearch">
                        @searchList[x].GetText(),
                    </span>
                }
    if (searchHighlighted)
    {
                    <span class="addedSearch" id="r-highlighted">
                        @searchList[searchList.Count - 1].GetText()
                    </span>
                }
                else
    {
                    <span class="addedSearch">
                        @searchList[searchList.Count - 1].GetText()
                    </span>
                }
            }
        </div>

        <textarea id="inputTextArea" @ref="searchInputRef" @onfocus="focusTop" @onblur="blurTop" class="comment-reply-message-input" placeholder="@searchInputPlaceholder" style="resize:none" @bind="searchInput" @bind:event="oninput" rows="1" @onkeydown="@(e => detectKeyTop(e))" @onkeyup="() => topInput()" />
        @*@onchange="@((String.IsNullOrEmpty(searchInput) ? detectDel() : detectDel()))"*@
    </div>
</div>

<div class="compose-middle-container">
    @if (focusedSearch && !(searchInput == ""))
    {
        <div class="rSuggestions">

            @foreach (var tag in displayTags)
            {
                <div class="tagSuggestion" @onclick="() => addTag(tag)" style="background-color:@((displayTags.IndexOf(tag) == selectedR && rSelected) ? "#141414" : "#000000")">
                    <span class="hashtagText">
                        @GetTagString(tag)
                    </span>
                </div>
            }
            @foreach (var person in displayUsers) //good to use foreach loops to avoid index errors with for loop
            {
                <div class="personSuggestion" @onclick="() => addPerson(person)" style="background-color:@((displayUsers.IndexOf(person)+displayTags.Count == selectedR) ? "#141414" : "#000000")">
                    <div class="suggestionImage">
                        <img src="@person.GetImg()" class="profile-pic" />
                    </div>
                    <div class="suggestionName">
                        <span>@person.GetName()</span>
                    </div>
                </div>
            }
        </div>

    }
    else if (justAddedSearch && (!(convo == null)))
    {
        <div class="page-content-om-compose">
            <section class="aos-init " data-aos-once="false" data-aos-duration="600" id="content-container">
                <div class="messages">
                    <div class="header-text">
                        <h1 class="feed-title">@convo.GetTitle()</h1>
                        <p class="names">
                            <span>
                                <LinkedNames ConversantList="@convo.GetConversants()"></LinkedNames>
                            </span>
                        </p>
                    </div>
                    <div class="message-group">
                        <p style="text-align:@getAlign(i % 2 == 0);" data-aos="fade" data-aos-once="false" data-aos-duration="600" data-aos-offset="60" data-aos-anchor-placement="@FadeInAnchorP">
                        </p>
                        @foreach (var group in convo.GetFeedPreview().GetGroups())
                        {
                            <p class=@getClass(i % 2 == 0) data-aos="fade" data-aos-once="false" data-aos-duration="600" data-aos-offset="@BottomFadeOffset" data-aos-anchor-placement="@FadeInAnchorP">
                                <span>
                                    @convo.GetFeedPreview().GetGroups()[i].Messages[i].Text
                                </span>
                            </p>
                        }
                    </div>
                </div>
            </section>
        </div>
    }
</div>